https://www.youtube.com/watch?v=RaxcR_yAMoA
UML이란
OMG 표준 모델링
시스템을 위한 범용 시각화 모델링 언어

상속 다형성 추상화 은닉화 

UML(UNIFIED Modeling Language) 의 특징
시각화
명세화
구축
문서화 
구축하고자 하는 시스템을 시각화
어떻게 구축할지 명세화 하고 문서화 하면서 구축한다. 
템플릿 으로써 다른사람이 보고 우리가 구축한 시스템을 이해하고 
참여하는 이해당사자들이 소통하는 언어가 된다.

UNIFIED  단일화   Modeling  모델링  Language 언어 
OOAD/booch OOSE/Jacobson OMT/Rumbaugh
유즈케이스 , 클래스 ,객체 , 시퀀스 ,상태 등이 있는데
그외 컴포넌트 컴포넌트 구조 등이 더 있다.

UML - 구조다이어 , 행위다이어
구조는 6개의 다이어그램 클래스,객체,컴포넌트,배포,패키지, 등
행위 : 활동,유즈케이스,시퀀스,커뮤니케이션,타이밍다이어그램
복잡한 업무를 추상화 하고 추상화된 업무를 구현하기 쉽도록 정제하는 과정이다.
업무도메인 -> 분석도메인 -> 설계도메인 

추상화 : 내부의 복잡한 사실들을 감추고 이해하기 쉽도록 단순화 하는것 
정제  : 추상화된 사실의 내부를 펼치는 것 (구현이 가능한 형태로 펼치는것
모델 이란
모방의 대상 또는 인물 , 건축에서의 설계 시공간 판단하기 위한 모형
모델 : 실제를 단순화
개발하려는 시스템을 보다 이해하기 위해 모델을 생성
있는 그대로 시각화 , 구축할대 안내해주는 템플릿
소프트웨어 시스템이 구현하는 추상화된 업무의 모형
모델링 : 모델을 생성하는 과정 , 실제 업무의 추상화 과정 

모델에는 여러가지 뷰가 있을수 있다.

모델뷰 - 정적인 뷰 , 동적인 뷰
정적인뷰 : 특정한 시스템의 정적인 스냅샷 을 표현 , 구조모델
동적인뷰 : 시스템의 동적인 행위 표현 , 동적 모델

프로그램 언어 발전 과정 - 추상화 과정 이라고 보면 된다.
	기계어 - 0과1 조합
	사람이 이해하기 쉽지 않다
기계어 - 전기신호가 0,1로 되어있어 
어셈블리어 : 기계어가 아는 010101를 사람이 이해하기 쉬운 언어로 바꿔줌
3세대언어 - c , 객체지향언어 - java , 관점지향언어로 발전함 

다음 단계의 언어는
가장 추상적인 언어는 그림으로 표현되는 언어이다.
다음 단계의 프로그래밍 언어는 (그림)으로 표현되는 언어이다.

모델 = 코드 
변환도구를 사용해서 모델로부터 변환도구로 코드화 되어서 구성요소가될수있다.
모델을 소스 코드로 변환 - 순공학
소스코드를 모델로 변환 - 역공학

 UML 모델링 도구 
오픈소스UML - ArgoUML , Modelio , 
상용UML - Rational Software Architect(자바기반) , Enterprise Architect(윈도우기반-가격이저렴)
Visual Paradigm forUML , MagicDrwa UML, StarUML(1.0기반)-클래스생성시 한글이름이 자동부여가능
StarUML - 등록되지 않는 유저한테는 무제한으로 사용이 가능  
무료 UML - Visual Paradigm for UML Community Edition 
	Possidon for UML Community Edition 
기준 : 
6개 구조 다이어그램 , 7개 행위 다이어그램 구현해줘야 한다. 

MDD 기능제공 - 프로그래밍 언어 코드 생성 
기술 지원 코드 생성 해줌 

https://www.youtube.com/watch?v=UKmD_Xi41UA&list=PLUWNXmQtLdmApTPhJTemD8hQ521BqRByx&index=5
클래스 다이어그램 
시스템의 클래스와 이들 상호 간의 관계 오퍼레이션과 애트리 뷰트를 표현한다.

분리될수있는건  흰색 다이아몬드 , 분리될수없는건 검정색다이아몬드 ? 
연료는 필수 

구성요소
클래스이름(가운대에적음) - 캡슐화된것(애트리뷰트와 오퍼레이션)
- 애트리뷰트 - 데이터 타입
+ 오퍼레이션(매개변수:매개변수타입) : 반환타입 


+ ,- 가 오는데 가시성 (외부에 노출시킬지...)
private : -    <-주로 애트리뷰트 
protected : #  자식만
public : +
package : ~ 

예) 자동차 
인터페이스  : 스테레오 타입 
<<interface>>  이 모델요소가 인터페이스 라는걸 알려준다.
사각형 안에  맨위 인터페이스 이름이 오고  오퍼레이션만 포함한다 
오퍼레이션(매개변수 : 매개타입 : 변환타입)
O 원형아이콘으로 표현한다 

클래스 다이어그램 관계
관계란 ? 모델요소사이의 의미적인 연결 
두 클래스가 어떤관계인지 명확하게 할때 관계이름을 표현하는것이 좋다
회사 와 개인    고용하다라는 관계가 있다. 명사로 표현한다.
고용자 와 직원  에 다수성이 포함될수있다 객체 객수를 지정
방향성 : 화살표의 방향으로만 전달될수 있다. 
회사는 개인에 메시지를 보낼수있지만 개인은 회사에 메시지를 보낼수없다


다수성 표기
0 : 선택적
1 : 필수적 
0..1  0또는 1
1  정확하게 1
0..*  0또는 다수 ( 0이상 )
*  많타
1..*  1또는 다수 (무조건 하나이상)
1..7  1에서부터 7까지
1..3 , 6 ,8..* 1에서 부터 3까지 또는 6또는 8이상
방향성 : 클래스 사이의 결합성을 이해할수있는 좋은 수단이 된다.
양방향성 : 결합성이 높음
단방향성 : 결합성이 낮다 
결합성이 낮게 설계하는게 좋다

무방향성은 x->   ,  -> 한쪽은 미정 , <-> 둘다 방향성 
A - B  둘다 미정 또는 둘다 방향성 일수도있다 ,   A x - x B 둘다 무방향성


연관관계 - 모델 요소사이의 구조적인 관계를 표현 
		클래스의 속성 으로 실현됨
		방향성은 단방향성 , 양방향성 일수도 있다.

컴포지션 관계
모델 요소사이의 전체 부분 (has a)관계를 표현
전체 요소가 소멸될때 모든 부분요소도 소멸된다

부분요소는 전체 요소 없이 존재 할수 없다. .

컴포지션연관관계 - 색칠한다이아몬드 
집합연관관계 - 안칠해진다이아몬드 
종속성관계 - 한클래스가 다른 클래스를 사용하는 관계를 표현 
일반화 관계 - 한클래스가 다른 클래스의 구조와 행위를 공유하는 관계를 포함
 즉  서브클래스가 수퍼클래스를 상속하는 추상화 계층도를 정의한다. 
실현관계(다형성을실현) - 한 클래스가 다른 클래스 또는 인터페이스의 명세를 구현하는 관계를 표현
 

연관  선으로
집계  선위에 숫자
컴포지션  다이아몬드
종속성
일반화
실현 

----------------------------------------------
시퀀스 다이어그램
상호작용의 시간 중심 관점
메시지의 명확한 순서를 표시
전반적인 흐름의 시각화에 좋음
실시간 명세의 표현에 좋음
복잡한 시나리오의 표현에 좋음

시퀀스 다이어그램
참여자 사이의 시간 순서로 배열된 상호작용 패턴을 표현한다
상호작용의 참여자는 참여자가 누구이며 , 그들이 어떤 메시지를 보내는지를 표현한다

라이프라인(lifeline)
특정시간에 역할의 존재를 표현한다
역할(role)  -  가로 막대기 
상호작용의 참여자
클래스 류의 인스턴스
활성화(activation) - 세로 막대기
행위에 참여자를 표현함 , 제어 포커스 


메시지 : 역할 사이의 상호작용을 표현 , 오퍼레이션 호출 : 호출메시지
인스턴스 생성과 소멸 : 생성 /소멸 메시지
신호 전송(send signal 

메시지는 5가지
동기메시지 : 동기적으로 메시지 전송 -----------> 채워진 실선
비동기 메시지 : 비동기적으로 메시지 전송 ------------> 실선에 닫혀진 화살표
반환메시지 : 동기적 메시지의 호출을 반환함 <-----------------------
생성 메시지  : 인스턴스를 생성함  
소멸 메시지  : 인스턴스를 소멸한다 

동기/비동기 반환메시지
동기메시지 : 송신자는 수신자가 요청된 오퍼레이션의 실행을 완료할때까지 기다린다
비동기메시지 : 송신자는 수신자에게 메시지를 보내고 다음작업 수행
수신자로부터 반환을 기다리지 않는다
반환메시지 :  이전메시지 수신자가 해당 메시지의 송신자에게 제어 포커스를 되돌려준다

생성/소멸 메시지
송신자는 수신자의 인스턴스를 생성한다
소멸메시지 : 송신자는 수신자의 인스턴스를 소멸한다 
결합단편 : 상호작용해서 조건구조를 정리할수있게 한다. 
상호작용연산자 , 보호표현식 , 상호작용 피연산자로 구성된다
상호작용 연산자 : 조건문 반복문이랑 유사
보호표현식 : 조건값
UML : 다양한 상호작용 연산자를 제공

조건 분기 : opt 단일조건 분기
	if(조건) than 행위
 
alt 연산자  다중조건 분기 
	if(조건1) then 행위1
	else if (조건2) then 행위2
	else 행위3 
while(true) 
break 연산자  , 반복탈출 , break문 

상호작용 사용 :
다른 다이어그램을 참조함 , 큰 다이어그램을 상호작용 컬렉션으로 분할하여 재사용할수있도록 관리
참조(ref) 유형의 상호작용

유스케이스 다이어그램 ( 어떤 기능만 인지만 표현하면 된다.)
시스템의 행위를 모델링 하여 시스템의 요구사항을 표현한다
시스템의 상위 레벨 기능과 범위를 기술한다 

주제(subject)
구축해야할 시스템 부분 , 시스템 영역 결정
시스템을 사용하는 사람 / 사물 즉 엑터와 시스템이 엑터에게 제공하는 이점 즉
유스케이스로 정의되는데
엑터는 시스템 영역의 외부
유스케이는 시스템 영역의 내부
액터(actor)
시스템 외부에서 시스템과 상호작용하는 사람이나 시스템
외부 시스템이나 조직 장치일수있다 -> 시스템을 사용하는 사람인 것만은 아니다
엑터가 사람인 경우 그사람이 시스템과 상호작용하는 역할이다
액터는 한 사람의 개인이나 특정한 실체가 아니다

유스케이스 (use case)
여러개의 연속적인 활동으로 구성된 시스템 행위의 단위
특정한 엑터에게 가치있는 주목학할만 결과를 산출하기 위해 시스템이 수행하는 행위의 연속
시스템의 행위가 시작해서 하나의 단위로 끝까지 완료됨
엑터에게 가치있는 결과를 제공한다. 

유스케이스 는 타원형으로 표현됨

연관 : 엑터가 유스케이스를 사용하는 커뮤니케이션 관계
포함(include) 관계 : 하나의 유스케이스가 다른 유스케이스의 행위를 포함하는 관계
하나이상의 여러 유스케이스에 의해 재사용되는 행위의 부분을 모델링할때 사용

확장(extend) 관계 : 하나의 유스케이스가 다른 유스케이스의 행위를 선택적으로 사용하는 관계
선택적인 행위의 부분을 식별하여 별도의 유스케이스에 두도록 모델링할때 사용
확장점 확장유스케이스는 조건에 따라 실행될수도 있고 실행 안될수도있다

방향은  포함관계의 반대이다

일반화 관계 - 일반화/특수화 관계가 존재할때 사용된다.
자식 유스케이스는 부모 유스케이스 기능을 상속받는다.

일반화 관계 - 일반화 / 특수화 관계가 존재할때 사용한다.  